#!/usr/bin/python

"""rudder
A CLI interface the Rudder Web API.
If 

Usage:
  rudder api <method> <api_url> [options]
  rudder <object> <command> [<id>] [options]
  
Options:
 -h --help                Show help
 -f --conffile=<file>     Configuration file (default: ~/.rudder)
 -u --url=<url>           Base URL (default: local Rudder if any)
 -t --token=<token>       API token (create one from Rudder administration)
 -a --ca=<file>           Certificate authority to use to verify SSL (default: python CA bundle)
 --skip-verify            To avoid SSL certificate verification
 -p --proxy=<proxy>       Proxy to use to connect to api (default: '')
 --timeout=<timeout>      Timeout default duration in seconds (default: 5s)
 -r --raw                 Print raw answer
 --reason=<reason>        Reason message for changes (default '')
 --cr-name=<name>         Change Request name (default defined in Rudder)
 --cr-description=<text>  Change Request description

Currently supported objects:
  rule(s)
  directive(s)
  group(s)
  node(s)
  parameter(s)
  change_request(s)

Currently supported commands: 
  list
  get <id>
  create
  update
  delete
  clone

Specific commands:
  group reload
  node status
  change decline
"""

from rudder import RudderEndPoint
import requests
import pprint
import json
import docopt
import os
import re
import sys

# Do a Rudder api call with parameters
def apicall(function, kwargs, direct):
  if direct:
    try:
      return rep.request(**kwargs)
    except TypeError as e:
      print("Wrong parameter used in generic api call")
      exit(2)
  else:
    try:
      call = getattr(rep, function)
    except AttributeError:
      print("Unknown function name: " + function)
      exit(3)
    try:
      return call(**kwargs)
    except TypeError:
      print("Wrong parameter used in: " + function)
      exit(4)

# Load the configuration file
def load_config(filename):
  try: # Python 2
    from ConfigParser import ConfigParser
  except ImportError: # Python 3
    from configparser import ConfigParser
  config = ConfigParser(allow_no_value=True)
  config.read(os.path.expanduser(filename))
  sections = config.sections()
  if len(sections) == 0:
    return {}
  conf = dict(("--"+key, True if value is None else value)
              for key, value in config.items(sections[0]))
  return conf

# Detect proxy from environment, depending on url type
def get_proxy(conf, args):
  if '--url' in args:
    url = args['--url']
  elif '--url' in conf:
    url = conf['--url']
  else:
    return ''
  match = re.match(r'^(https?).*', url)
  if match is None:
    return None
  url_type = match.group(1)
  if url_type + "_proxy" in os.environ:
    return os.environ[url_type + "_proxy"]
  if url_type + "_PROXY" in os.environ:
    return os.environ[url_type + "_PROXY"]
  if url_type.upper() + "_PROXY" in os.environ:
    return os.environ[url_type.upper() + "_PROXY"]
  return None

# True if we are on a Rudder root server
def isroot():
  UUID_HIVE = "/opt/rudder/etc/uuid.hive"
  if os.path.exists(UUID_HIVE):
    with open(UUID_HIVE, 'r') as data:
      if data.read() == "root\n":
        return True
  return False

# Remove None values in a dictionary
def clean_params(data):
  for k in data.keys():
    if data[k] is None:
      del(data[k])


## MAIN
if __name__ == "__main__":
  # defaults (not managed by docopt to be able to use conffile)
  conf = { "--conffile": "~/.rudder",
           "--timeout": "5",
           "--raw": False,
           "--skip-verify": False,
          }
  if isroot():
    conf["--url"] = "https://localhost/rudder"

  # options from command line
  arguments = docopt.docopt(__doc__)
  clean_params(arguments)

  # options from configuration file
  if '--conffile' in arguments:
    configuration = load_config(arguments['--conffile'])
  else:
    configuration = load_config(conf['--conffile'])

  # take default proxy from environment (can depend on the url parameter)
  conf["--proxy"] = get_proxy(configuration, arguments)

  # raw default depends on arguments
  if arguments['api']:
    conf["--raw"] = True

  # configuration overriding : env -> conffile -> arguments
  conf.update(configuration)
  conf.update(arguments)

  # reinterpret some options
  timeout = float(conf["--timeout"])
  verify = not conf["--skip-verify"]
  if verify and "--ca" in conf:
    verify = conf["--ca"]

  # Mandatory options
  if "--url" not in conf:
    print("Error: A Rudder URL is needed")
    exit(6)
  if "--token" not in conf:
    print("Error: A Rudder API token is needed")
    exit(7)

  is_change = False
  # prepare api call
  if conf["api"]:
    # generic call
    separator = "?" if re.match(r'\?', conf["<api_url>"]) else "&"
    kwargs = {
               "method": conf["<method>"].upper(),
               "api_url": conf["<api_url>"] + separator + "prettify=true",
               "return_raw": conf["--raw"],
            }
    if conf["<method>"] == "POST" or conf["<method>"] == "PUT":
      is_change = True
      kwargs['json_data'] = sys.stdin.readlines()
  else:
    # object based call
    kwargs = { "return_raw": conf["--raw"] }
    function = conf['<command>'] + '_' + conf['<object>']
    if '<id>' in conf:
      kwargs['id'] = conf['<id>']
    if conf['<command>'] != 'list' and conf['<command>'] != 'get' and conf['<command>'] != 'delete':
      json_data = sys.stdin.read()
      pprint.pprint(json_data)
      kwargs.update(json.loads(json_data))

  # change message
  if is_change:
    cinfo = {}
    if '--reason' in conf:
      cinfo['reason'] = conf['--reason']
    if '--cr-name' in conf:
      cinfo['changeRequestName'] = conf['--cr-name']
    if '--cr-description' in conf:
      cinfo['changeRequestDescription'] = conf['--cr-description']
    if not cinfo:
       kwargs['change_info'] = cinfo

  try:
      rep = RudderEndPoint(conf["--url"], conf["--token"], verify=verify, timeout=timeout, proxy=conf['--proxy'])
      res = apicall(function, kwargs, conf['api'])
  except requests.exceptions.RequestException as e:
      print("Error in calling " + api_url)
      pprint.pprint(e)
      pprint.pprint(e.response.text)
      exit(10)

  if conf["--raw"]:
    print(res)
  else:
    print(json.dumps(res, ensure_ascii=False, indent=4, sort_keys=True))

